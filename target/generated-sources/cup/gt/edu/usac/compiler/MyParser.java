
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.usac.compiler;

import java_cup.runtime.*;
import java.util.*;
import Data.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MyParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\045\003\000\002\045\004\000\002\045\003" +
    "\000\002\045\004\000\002\045\004\000\002\045\004\000" +
    "\002\036\003\000\002\036\004\000\002\035\003\000\002" +
    "\035\004\000\002\035\004\000\002\027\003\000\002\027" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\004\000\002\014\003\000\002\014\004" +
    "\000\002\042\011\000\002\042\007\000\002\013\003\000" +
    "\002\013\005\000\002\031\011\000\002\031\013\000\002" +
    "\031\015\000\002\031\010\000\002\031\012\000\002\031" +
    "\014\000\002\031\014\000\002\031\013\000\002\030\013" +
    "\000\002\030\012\000\002\023\011\000\002\023\010\000" +
    "\002\033\003\000\002\033\005\000\002\033\005\000\002" +
    "\032\003\000\002\032\004\000\002\024\005\000\002\024" +
    "\003\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\034\004\000\002\034\004\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\004\000\002\026\004\000\002\020\011\000\002\020" +
    "\010\000\002\022\013\000\002\022\012\000\002\021\004" +
    "\000\002\021\004\000\002\040\016\000\002\040\014\000" +
    "\002\037\011\000\002\037\007\000\002\037\010\000\002" +
    "\037\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\010\005\000\002\010\007" +
    "\000\002\041\003\000\002\041\005\000\002\011\005\000" +
    "\002\011\006\000\002\012\003\000\002\012\005\000\002" +
    "\006\003\000\002\006\005\000\002\007\004\000\002\005" +
    "\011\000\002\005\012\000\002\005\011\000\002\005\012" +
    "\000\002\005\010\000\002\005\011\000\002\005\010\000" +
    "\002\005\011\000\002\005\011\000\002\005\010\000\002" +
    "\005\004\000\002\043\003\000\002\044\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\004\000\002\002\003\000\002" +
    "\002\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\056\003\025\017\027\023\012\024\011\025" +
    "\042\026\040\027\006\030\023\031\043\032\005\033\016" +
    "\040\013\047\030\050\037\053\046\055\021\061\007\062" +
    "\026\063\024\066\031\071\047\074\034\001\002\000\066" +
    "\002\uffec\003\uffec\015\uffec\017\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\040\uffec\047\uffec\050\uffec\053\uffec\055\uffec\061\uffec\062" +
    "\uffec\063\uffec\066\uffec\067\uffec\070\uffec\071\uffec\074\uffec" +
    "\001\002\000\004\040\uff82\001\002\000\004\040\uff85\001" +
    "\002\000\004\020\u0119\001\002\000\066\002\uffef\003\uffef" +
    "\015\uffef\017\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\040\uffef\047\uffef" +
    "\050\uffef\053\uffef\055\uffef\061\uffef\062\uffef\063\uffef\066" +
    "\uffef\067\uffef\070\uffef\071\uffef\074\uffef\001\002\000\004" +
    "\040\uff88\001\002\000\004\006\375\001\002\000\014\004" +
    "\363\006\153\010\364\021\362\040\uff80\001\002\000\004" +
    "\002\361\001\002\000\004\020\360\001\002\000\004\040" +
    "\uff81\001\002\000\062\002\ufff8\003\ufff8\015\ufff8\017\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\040\ufff8\047\ufff8\050\ufff8\053\ufff8" +
    "\055\ufff8\061\ufff8\062\ufff8\063\ufff8\066\ufff8\071\ufff8\074" +
    "\ufff8\001\002\000\060\002\000\003\117\017\027\023\012" +
    "\024\011\025\042\026\040\027\006\030\023\031\043\032" +
    "\005\033\016\040\013\047\030\050\037\053\046\055\021" +
    "\061\007\062\026\063\024\066\031\071\047\074\034\001" +
    "\002\000\004\006\335\001\002\000\066\002\uffe9\003\uffe9" +
    "\015\uffe9\017\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\040\uffe9\047\uffe9" +
    "\050\uffe9\053\uffe9\055\uffe9\061\uffe9\062\uffe9\063\uffe9\066" +
    "\uffe9\067\uffe9\070\uffe9\071\uffe9\074\uffe9\001\002\000\004" +
    "\040\uff84\001\002\000\026\006\066\010\054\020\331\040" +
    "\332\041\064\042\067\043\055\044\056\051\060\052\062" +
    "\001\002\000\062\003\117\014\326\017\027\020\120\023" +
    "\012\024\011\025\042\026\040\027\006\030\023\031\043" +
    "\032\005\033\016\040\013\047\030\050\037\053\046\055" +
    "\021\061\007\062\026\063\024\066\031\071\047\074\034" +
    "\001\002\000\004\020\325\001\002\000\006\040\301\064" +
    "\302\001\002\000\066\002\uffe3\003\uffe3\015\uffe3\017\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\040\uffe3\047\uffe3\050\uffe3\053\uffe3" +
    "\055\uffe3\061\uffe3\062\uffe3\063\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\071\uffe3\074\uffe3\001\002\000\004\006\251\001\002" +
    "\000\066\002\uffee\003\uffee\015\uffee\017\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee" +
    "\033\uffee\040\uffee\047\uffee\050\uffee\053\uffee\055\uffee\061" +
    "\uffee\062\uffee\063\uffee\066\uffee\067\uffee\070\uffee\071\uffee" +
    "\074\uffee\001\002\000\066\002\ufff1\003\ufff1\015\ufff1\017" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\040\ufff1\047\ufff1\050\ufff1\053" +
    "\ufff1\055\ufff1\061\ufff1\062\ufff1\063\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\074\ufff1\001\002\000\004\006\245\001" +
    "\002\000\004\040\214\001\002\000\066\002\uffed\003\uffed" +
    "\015\uffed\017\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\040\uffed\047\uffed" +
    "\050\uffed\053\uffed\055\uffed\061\uffed\062\uffed\063\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\074\uffed\001\002\000\004" +
    "\006\203\001\002\000\004\040\uff86\001\002\000\066\002" +
    "\ufff6\003\ufff6\015\ufff6\017\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\040" +
    "\ufff6\047\ufff6\050\ufff6\053\ufff6\055\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\074\ufff6\001" +
    "\002\000\004\040\uff87\001\002\000\004\040\uff83\001\002" +
    "\000\066\002\uffea\003\uffea\015\uffea\017\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\040\uffea\047\uffea\050\uffea\053\uffea\055\uffea\061" +
    "\uffea\062\uffea\063\uffea\066\uffea\067\uffea\070\uffea\071\uffea" +
    "\074\uffea\001\002\000\066\002\uffeb\003\uffeb\015\uffeb\017" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\040\uffeb\047\uffeb\050\uffeb\053" +
    "\uffeb\055\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\074\uffeb\001\002\000\004\014\111\001" +
    "\002\000\004\072\051\001\002\000\066\002\ufff0\003\ufff0" +
    "\015\ufff0\017\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\040\ufff0\047\ufff0" +
    "\050\ufff0\053\ufff0\055\ufff0\061\ufff0\062\ufff0\063\ufff0\066" +
    "\ufff0\067\ufff0\070\ufff0\071\ufff0\074\ufff0\001\002\000\004" +
    "\073\052\001\002\000\004\006\053\001\002\000\024\006" +
    "\066\010\054\040\063\041\064\042\067\043\055\044\056" +
    "\051\060\052\062\001\002\000\016\006\066\010\054\040" +
    "\063\041\064\043\055\044\056\001\002\000\044\004\uff91" +
    "\005\uff91\007\uff91\010\uff91\011\uff91\012\uff91\016\uff91\020" +
    "\uff91\021\uff91\034\uff91\035\uff91\036\uff91\037\uff91\056\uff91" +
    "\057\uff91\060\uff91\065\uff91\001\002\000\044\004\uff90\005" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\016\uff90\020\uff90" +
    "\021\uff90\034\uff90\035\uff90\036\uff90\037\uff90\056\uff90\057" +
    "\uff90\060\uff90\065\uff90\001\002\000\006\004\uffdf\007\uffdf" +
    "\001\002\000\022\004\uff8a\007\uff8a\010\uff8a\016\uff8a\020" +
    "\uff8a\057\uff8a\060\uff8a\065\uff8a\001\002\000\006\004\105" +
    "\007\104\001\002\000\022\004\uff89\007\uff89\010\uff89\016" +
    "\uff89\020\uff89\057\uff89\060\uff89\065\uff89\001\002\000\044" +
    "\004\uff8e\005\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\016" +
    "\uff8e\020\uff8e\021\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\056\uff8e\057\uff8e\060\uff8e\065\uff8e\001\002\000\044\004" +
    "\uff92\005\uff92\007\uff92\010\uff92\011\uff92\012\uff92\016\uff92" +
    "\020\uff92\021\uff92\034\uff92\035\uff92\036\uff92\037\uff92\056" +
    "\uff92\057\uff92\060\uff92\065\uff92\001\002\000\044\004\073" +
    "\005\076\007\uff8c\010\074\011\075\012\071\016\uff8c\020" +
    "\uff8c\021\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\065\uff8c\001\002\000\016\006\066\010" +
    "\054\040\063\041\064\043\055\044\056\001\002\000\036" +
    "\004\uff8b\007\uff8b\010\uff8b\016\uff8b\020\uff8b\021\uff8b\034" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\056\uff8b\057\uff8b\060\uff8b" +
    "\065\uff8b\001\002\000\016\004\073\005\076\007\072\010" +
    "\074\011\075\012\071\001\002\000\016\006\066\010\054" +
    "\040\063\041\064\043\055\044\056\001\002\000\044\004" +
    "\uff8d\005\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\016\uff8d" +
    "\020\uff8d\021\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\056" +
    "\uff8d\057\uff8d\060\uff8d\065\uff8d\001\002\000\016\006\066" +
    "\010\054\040\063\041\064\043\055\044\056\001\002\000" +
    "\016\006\066\010\054\040\063\041\064\043\055\044\056" +
    "\001\002\000\016\006\066\010\054\040\063\041\064\043" +
    "\055\044\056\001\002\000\016\006\066\010\054\040\063" +
    "\041\064\043\055\044\056\001\002\000\044\004\uff95\005" +
    "\uff95\007\uff95\010\uff95\011\uff95\012\uff95\016\uff95\020\uff95" +
    "\021\uff95\034\uff95\035\uff95\036\uff95\037\uff95\056\uff95\057" +
    "\uff95\060\uff95\065\uff95\001\002\000\044\004\uff94\005\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\016\uff94\020\uff94\021" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\056\uff94\057\uff94" +
    "\060\uff94\065\uff94\001\002\000\044\004\uff96\005\076\007" +
    "\uff96\010\uff96\011\075\012\071\016\uff96\020\uff96\021\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\056\uff96\057\uff96\060" +
    "\uff96\065\uff96\001\002\000\044\004\uff97\005\076\007\uff97" +
    "\010\uff97\011\075\012\071\016\uff97\020\uff97\021\uff97\034" +
    "\uff97\035\uff97\036\uff97\037\uff97\056\uff97\057\uff97\060\uff97" +
    "\065\uff97\001\002\000\044\004\uff93\005\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\016\uff93\020\uff93\021\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\056\uff93\057\uff93\060\uff93\065" +
    "\uff93\001\002\000\004\020\107\001\002\000\024\006\066" +
    "\010\054\040\063\041\064\042\067\043\055\044\056\051" +
    "\060\052\062\001\002\000\006\004\uffde\007\uffde\001\002" +
    "\000\066\002\uffe1\003\uffe1\015\uffe1\017\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\040\uffe1\047\uffe1\050\uffe1\053\uffe1\055\uffe1\061" +
    "\uffe1\062\uffe1\063\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1" +
    "\074\uffe1\001\002\000\044\004\uff8f\005\076\007\uff8f\010" +
    "\uff8f\011\075\012\071\016\uff8f\020\uff8f\021\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\056\uff8f\057\uff8f\060\uff8f\065" +
    "\uff8f\001\002\000\062\003\uff99\015\uff99\017\uff99\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\040\uff99\047\uff99\050\uff99\053\uff99\055\uff99" +
    "\061\uff99\062\uff99\063\uff99\066\uff99\070\uff99\071\uff99\074" +
    "\uff99\001\002\000\054\003\117\015\113\017\027\023\012" +
    "\024\011\025\042\026\040\027\006\030\023\031\043\032" +
    "\005\033\016\040\013\047\030\050\037\053\046\055\021" +
    "\063\024\066\031\071\047\074\034\001\002\000\070\002" +
    "\uff98\003\uff98\015\uff98\017\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\040" +
    "\uff98\047\uff98\050\uff98\053\uff98\054\uff98\055\uff98\061\uff98" +
    "\062\uff98\063\uff98\066\uff98\067\uff98\070\uff98\071\uff98\074" +
    "\uff98\001\002\000\054\003\117\015\113\017\027\023\012" +
    "\024\011\025\042\026\040\027\006\030\023\031\043\032" +
    "\005\033\016\040\013\047\030\050\037\053\046\055\021" +
    "\063\024\066\031\071\047\074\034\001\002\000\062\003" +
    "\ufff3\015\ufff3\017\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\040\ufff3\047" +
    "\ufff3\050\ufff3\053\ufff3\055\ufff3\062\ufff3\063\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\074\ufff3\001\002\000\004\050" +
    "\122\001\002\000\060\003\117\017\027\020\120\023\012" +
    "\024\011\025\042\026\040\027\006\030\023\031\043\032" +
    "\005\033\016\040\013\047\030\050\037\053\046\055\021" +
    "\061\007\062\026\063\024\066\031\071\047\074\034\001" +
    "\002\000\066\002\uff9a\003\uff9a\015\uff9a\017\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\040\uff9a\047\uff9a\050\uff9a\053\uff9a\055\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\066\uff9a\067\uff9a\070\uff9a\071" +
    "\uff9a\074\uff9a\001\002\000\066\002\uffe2\003\uffe2\015\uffe2" +
    "\017\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\040\uffe2\047\uffe2\050\uffe2" +
    "\053\uffe2\055\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2\067" +
    "\uffe2\070\uffe2\071\uffe2\074\uffe2\001\002\000\004\006\123" +
    "\001\002\000\026\006\135\010\054\040\131\041\064\042" +
    "\067\043\055\044\056\051\127\052\130\056\134\001\002" +
    "\000\034\004\uffc8\007\uffc8\010\uffc8\020\uffc8\021\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\065\uffc8\001\002\000\016\021\162\034\164\035\165\036" +
    "\166\037\170\056\167\001\002\000\034\004\uffc9\007\uffc9" +
    "\010\uffc9\020\uffc9\021\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\065\uffc9\001\002\000\032" +
    "\004\uffcb\007\uffcb\010\uffcb\020\uffcb\021\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\056\uff8a\057\uffcb\060\uffcb\001\002" +
    "\000\032\004\uffca\007\uffca\010\uffca\020\uffca\021\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\056\uff89\057\uffca\060\uffca" +
    "\001\002\000\044\004\uff8e\005\uff8e\006\153\007\uff8e\010" +
    "\uff8e\011\uff8e\012\uff8e\020\uff8e\021\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\056\uff8e\057\uff8e\060\uff8e\065\uff8e\001" +
    "\002\000\010\007\uffce\057\uffce\060\uffce\001\002\000\010" +
    "\007\uffd1\057\uffd1\060\uffd1\001\002\000\026\006\066\010" +
    "\054\040\131\041\064\042\067\043\055\044\056\051\127" +
    "\052\130\056\134\001\002\000\026\006\135\010\054\040" +
    "\131\041\064\042\067\043\055\044\056\051\127\052\130" +
    "\056\134\001\002\000\010\007\137\057\141\060\142\001" +
    "\002\000\004\020\146\001\002\000\026\006\066\010\054" +
    "\040\131\041\064\042\067\043\055\044\056\051\127\052" +
    "\130\056\134\001\002\000\004\057\144\001\002\000\004" +
    "\060\143\001\002\000\026\006\uffc6\010\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\051\uffc6\052\uffc6\056\uffc6" +
    "\001\002\000\026\006\uffc7\010\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\051\uffc7\052\uffc7\056\uffc7\001\002" +
    "\000\010\007\uffd0\057\uffd0\060\uffd0\001\002\000\066\002" +
    "\uffd4\003\uffd4\015\uffd4\017\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\040" +
    "\uffd4\047\uffd4\050\uffd4\053\uffd4\055\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\074\uffd4\001" +
    "\002\000\032\004\073\005\076\007\072\010\074\011\075" +
    "\012\071\021\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\056" +
    "\uff8c\001\002\000\010\007\151\057\141\060\142\001\002" +
    "\000\010\007\uffcf\057\uffcf\060\uffcf\001\002\000\010\007" +
    "\uffcd\057\uffcd\060\uffcd\001\002\000\026\006\066\007\155" +
    "\010\054\040\063\041\064\042\067\043\055\044\056\051" +
    "\060\052\062\001\002\000\006\007\uffa9\016\uffa9\001\002" +
    "\000\120\002\uffab\003\uffab\004\uffab\007\uffab\010\uffab\015" +
    "\uffab\017\uffab\020\uffab\021\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\047\uffab\050\uffab" +
    "\053\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab" +
    "\074\uffab\001\002\000\006\007\160\016\157\001\002\000" +
    "\024\006\066\010\054\040\063\041\064\042\067\043\055" +
    "\044\056\051\060\052\062\001\002\000\120\002\uffaa\003" +
    "\uffaa\004\uffaa\007\uffaa\010\uffaa\015\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\047\uffaa\050\uffaa\053\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\065\uffaa" +
    "\066\uffaa\067\uffaa\070\uffaa\071\uffaa\074\uffaa\001\002\000" +
    "\006\007\uffa8\016\uffa8\001\002\000\004\021\173\001\002" +
    "\000\024\006\066\010\054\040\131\041\064\042\067\043" +
    "\055\044\056\051\060\052\062\001\002\000\024\006\uffc5" +
    "\010\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\051" +
    "\uffc5\052\uffc5\001\002\000\024\006\uffc4\010\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\051\uffc4\052\uffc4\001" +
    "\002\000\024\006\uffc3\010\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\051\uffc3\052\uffc3\001\002\000\004\021" +
    "\171\001\002\000\024\006\uffc2\010\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\051\uffc2\052\uffc2\001\002\000" +
    "\024\006\uffc0\010\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\051\uffc0\052\uffc0\001\002\000\016\004\uffcc\007" +
    "\uffcc\010\uffcc\020\uffcc\057\uffcc\060\uffcc\001\002\000\024" +
    "\006\uffc1\010\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\051\uffc1\052\uffc1\001\002\000\062\003\ufff2\015\ufff2" +
    "\017\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\040\ufff2\047\ufff2\050\ufff2" +
    "\053\ufff2\055\ufff2\062\ufff2\063\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\074\ufff2\001\002\000\004\050\176\001\002" +
    "\000\004\006\177\001\002\000\026\006\135\010\054\040" +
    "\131\041\064\042\067\043\055\044\056\051\127\052\130" +
    "\056\134\001\002\000\010\007\201\057\141\060\142\001" +
    "\002\000\004\020\202\001\002\000\066\002\uffd5\003\uffd5" +
    "\015\uffd5\017\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\040\uffd5\047\uffd5" +
    "\050\uffd5\053\uffd5\055\uffd5\061\uffd5\062\uffd5\063\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\074\uffd5\001\002\000\026" +
    "\006\135\010\054\040\131\041\064\042\067\043\055\044" +
    "\056\051\127\052\130\056\134\001\002\000\010\007\205" +
    "\057\141\060\142\001\002\000\004\014\111\001\002\000" +
    "\060\003\117\015\113\017\027\023\012\024\011\025\042" +
    "\026\040\027\006\030\023\031\043\032\005\033\016\040" +
    "\013\047\030\050\037\053\046\055\021\061\007\062\026" +
    "\063\024\066\031\071\047\074\034\001\002\000\066\002" +
    "\uffd2\003\uffd2\015\uffd2\017\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\040" +
    "\uffd2\047\uffd2\050\uffd2\053\uffd2\055\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\074\uffd2\001" +
    "\002\000\060\003\117\015\113\017\027\023\012\024\011" +
    "\025\042\026\040\027\006\030\023\031\043\032\005\033" +
    "\016\040\013\047\030\050\037\053\046\055\021\061\007" +
    "\062\026\063\024\066\031\071\047\074\034\001\002\000" +
    "\066\002\uffd3\003\uffd3\015\uffd3\017\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\040\uffd3\047\uffd3\050\uffd3\053\uffd3\055\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\074" +
    "\uffd3\001\002\000\062\002\ufff7\003\ufff7\015\ufff7\017\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\040\ufff7\047\ufff7\050\ufff7\053\ufff7" +
    "\055\ufff7\061\ufff7\062\ufff7\063\ufff7\066\ufff7\071\ufff7\074" +
    "\ufff7\001\002\000\010\016\237\020\241\021\240\001\002" +
    "\000\012\006\215\016\uffad\020\uffad\021\uffad\001\002\000" +
    "\026\007\221\024\011\025\042\026\040\027\006\030\023" +
    "\031\043\032\005\033\016\040\220\001\002\000\006\007" +
    "\uffa7\016\uffa7\001\002\000\006\007\231\016\230\001\002" +
    "\000\004\040\uff80\001\002\000\004\014\111\001\002\000" +
    "\004\040\223\001\002\000\006\007\uffa5\016\uffa5\001\002" +
    "\000\054\003\117\015\113\017\027\023\012\024\011\025" +
    "\042\026\040\027\006\030\023\031\043\032\005\033\016" +
    "\040\013\047\030\050\037\053\046\055\021\063\024\066" +
    "\031\071\047\074\034\001\002\000\054\003\117\015\113" +
    "\017\027\023\012\024\011\025\042\026\040\027\006\030" +
    "\023\031\043\032\005\033\016\040\013\047\030\050\037" +
    "\053\046\055\021\063\024\066\031\071\047\074\034\001" +
    "\002\000\066\002\uffa0\003\uffa0\015\uffa0\017\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\040\uffa0\047\uffa0\050\uffa0\053\uffa0\055\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\066\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\074\uffa0\001\002\000\066\002\uffa4\003\uffa4\015\uffa4" +
    "\017\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\040\uffa4\047\uffa4\050\uffa4" +
    "\053\uffa4\055\uffa4\061\uffa4\062\uffa4\063\uffa4\066\uffa4\067" +
    "\uffa4\070\uffa4\071\uffa4\074\uffa4\001\002\000\024\024\011" +
    "\025\042\026\040\027\006\030\023\031\043\032\005\033" +
    "\016\040\220\001\002\000\004\014\111\001\002\000\054" +
    "\003\117\015\113\017\027\023\012\024\011\025\042\026" +
    "\040\027\006\030\023\031\043\032\005\033\016\040\013" +
    "\047\030\050\037\053\046\055\021\063\024\066\031\071" +
    "\047\074\034\001\002\000\054\003\117\015\113\017\027" +
    "\023\012\024\011\025\042\026\040\027\006\030\023\031" +
    "\043\032\005\033\016\040\013\047\030\050\037\053\046" +
    "\055\021\063\024\066\031\071\047\074\034\001\002\000" +
    "\066\002\uff9f\003\uff9f\015\uff9f\017\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\040\uff9f\047\uff9f\050\uff9f\053\uff9f\055\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\074" +
    "\uff9f\001\002\000\066\002\uffa3\003\uffa3\015\uffa3\017\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\040\uffa3\047\uffa3\050\uffa3\053\uffa3" +
    "\055\uffa3\061\uffa3\062\uffa3\063\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\074\uffa3\001\002\000\006\007\uffa6\016\uffa6" +
    "\001\002\000\004\040\244\001\002\000\024\006\066\010" +
    "\054\040\131\041\064\042\067\043\055\044\056\051\060" +
    "\052\062\001\002\000\066\002\uffaf\003\uffaf\015\uffaf\017" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\040\uffaf\047\uffaf\050\uffaf\053" +
    "\uffaf\055\uffaf\061\uffaf\062\uffaf\063\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\074\uffaf\001\002\000\004\020\243\001" +
    "\002\000\066\002\uffae\003\uffae\015\uffae\017\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\040\uffae\047\uffae\050\uffae\053\uffae\055\uffae" +
    "\061\uffae\062\uffae\063\uffae\066\uffae\067\uffae\070\uffae\071" +
    "\uffae\074\uffae\001\002\000\010\016\uffac\020\uffac\021\uffac" +
    "\001\002\000\024\006\066\010\054\040\063\041\064\042" +
    "\067\043\055\044\056\051\060\052\062\001\002\000\006" +
    "\004\105\007\247\001\002\000\004\020\250\001\002\000" +
    "\066\002\uffe0\003\uffe0\015\uffe0\017\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\040\uffe0\047\uffe0\050\uffe0\053\uffe0\055\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\074" +
    "\uffe0\001\002\000\004\040\252\001\002\000\004\007\253" +
    "\001\002\000\004\014\111\001\002\000\004\070\256\001" +
    "\002\000\006\067\264\070\265\001\002\000\024\006\066" +
    "\010\054\040\131\041\064\042\067\043\055\044\056\051" +
    "\060\052\062\001\002\000\004\065\260\001\002\000\052" +
    "\003\117\017\027\023\012\024\011\025\042\026\040\027" +
    "\006\030\023\031\043\032\005\033\016\040\013\047\030" +
    "\050\037\053\046\055\021\063\024\066\031\071\047\074" +
    "\034\001\002\000\060\003\117\017\027\023\012\024\011" +
    "\025\042\026\040\027\006\030\023\031\043\032\005\033" +
    "\016\040\013\047\030\050\037\053\046\055\021\062\262" +
    "\063\024\066\031\067\uffb4\070\uffb4\071\047\074\034\001" +
    "\002\000\004\020\263\001\002\000\006\067\uffb5\070\uffb5" +
    "\001\002\000\004\065\273\001\002\000\024\006\066\010" +
    "\054\040\131\041\064\042\067\043\055\044\056\051\060" +
    "\052\062\001\002\000\004\065\267\001\002\000\052\003" +
    "\117\017\027\023\012\024\011\025\042\026\040\027\006" +
    "\030\023\031\043\032\005\033\016\040\013\047\030\050" +
    "\037\053\046\055\021\063\024\066\031\071\047\074\034" +
    "\001\002\000\060\003\117\017\027\023\012\024\011\025" +
    "\042\026\040\027\006\030\023\031\043\032\005\033\016" +
    "\040\013\047\030\050\037\053\046\055\021\062\271\063" +
    "\024\066\031\067\uffb6\070\uffb6\071\047\074\034\001\002" +
    "\000\004\020\272\001\002\000\006\067\uffb7\070\uffb7\001" +
    "\002\000\052\003\117\017\027\023\012\024\011\025\042" +
    "\026\040\027\006\030\023\031\043\032\005\033\016\040" +
    "\013\047\030\050\037\053\046\055\021\063\024\066\031" +
    "\071\047\074\034\001\002\000\056\003\117\015\113\017" +
    "\027\023\012\024\011\025\042\026\040\027\006\030\023" +
    "\031\043\032\005\033\016\040\013\047\030\050\037\053" +
    "\046\055\021\062\276\063\024\066\031\071\047\074\034" +
    "\001\002\000\066\002\uffb8\003\uffb8\015\uffb8\017\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\040\uffb8\047\uffb8\050\uffb8\053\uffb8\055" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\066\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\074\uffb8\001\002\000\004\020\277\001\002\000" +
    "\004\015\113\001\002\000\066\002\uffb9\003\uffb9\015\uffb9" +
    "\017\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\040\uffb9\047\uffb9\050\uffb9" +
    "\053\uffb9\055\uffb9\061\uffb9\062\uffb9\063\uffb9\066\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\074\uffb9\001\002\000\004\006\311" +
    "\001\002\000\004\006\303\001\002\000\004\007\304\001" +
    "\002\000\004\014\111\001\002\000\054\003\117\015\113" +
    "\017\027\023\012\024\011\025\042\026\040\027\006\030" +
    "\023\031\043\032\005\033\016\040\013\047\030\050\037" +
    "\053\046\055\021\063\024\066\031\071\047\074\034\001" +
    "\002\000\054\003\117\015\113\017\027\023\012\024\011" +
    "\025\042\026\040\027\006\030\023\031\043\032\005\033" +
    "\016\040\013\047\030\050\037\053\046\055\021\063\024" +
    "\066\031\071\047\074\034\001\002\000\066\002\uff9b\003" +
    "\uff9b\015\uff9b\017\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\040\uff9b\047" +
    "\uff9b\050\uff9b\053\uff9b\055\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\066\uff9b\067\uff9b\070\uff9b\071\uff9b\074\uff9b\001\002\000" +
    "\066\002\uff9c\003\uff9c\015\uff9c\017\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\040\uff9c\047\uff9c\050\uff9c\053\uff9c\055\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\074" +
    "\uff9c\001\002\000\026\007\313\024\011\025\042\026\040" +
    "\027\006\030\023\031\043\032\005\033\016\040\220\001" +
    "\002\000\006\007\320\016\230\001\002\000\004\014\111" +
    "\001\002\000\054\003\117\015\113\017\027\023\012\024" +
    "\011\025\042\026\040\027\006\030\023\031\043\032\005" +
    "\033\016\040\013\047\030\050\037\053\046\055\021\063" +
    "\024\066\031\071\047\074\034\001\002\000\054\003\117" +
    "\015\113\017\027\023\012\024\011\025\042\026\040\027" +
    "\006\030\023\031\043\032\005\033\016\040\013\047\030" +
    "\050\037\053\046\055\021\063\024\066\031\071\047\074" +
    "\034\001\002\000\066\002\uff9e\003\uff9e\015\uff9e\017\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\040\uff9e\047\uff9e\050\uff9e\053\uff9e" +
    "\055\uff9e\061\uff9e\062\uff9e\063\uff9e\066\uff9e\067\uff9e\070" +
    "\uff9e\071\uff9e\074\uff9e\001\002\000\066\002\uffa2\003\uffa2" +
    "\015\uffa2\017\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\040\uffa2\047\uffa2" +
    "\050\uffa2\053\uffa2\055\uffa2\061\uffa2\062\uffa2\063\uffa2\066" +
    "\uffa2\067\uffa2\070\uffa2\071\uffa2\074\uffa2\001\002\000\004" +
    "\014\111\001\002\000\054\003\117\015\113\017\027\023" +
    "\012\024\011\025\042\026\040\027\006\030\023\031\043" +
    "\032\005\033\016\040\013\047\030\050\037\053\046\055" +
    "\021\063\024\066\031\071\047\074\034\001\002\000\054" +
    "\003\117\015\113\017\027\023\012\024\011\025\042\026" +
    "\040\027\006\030\023\031\043\032\005\033\016\040\013" +
    "\047\030\050\037\053\046\055\021\063\024\066\031\071" +
    "\047\074\034\001\002\000\066\002\uff9d\003\uff9d\015\uff9d" +
    "\017\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\040\uff9d\047\uff9d\050\uff9d" +
    "\053\uff9d\055\uff9d\061\uff9d\062\uff9d\063\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\071\uff9d\074\uff9d\001\002\000\066\002\uffa1" +
    "\003\uffa1\015\uffa1\017\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\040\uffa1" +
    "\047\uffa1\050\uffa1\053\uffa1\055\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\074\uffa1\001\002" +
    "\000\066\002\ufff5\003\ufff5\015\ufff5\017\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\040\ufff5\047\ufff5\050\ufff5\053\ufff5\055\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\074\ufff5\001\002\000\004\002\uffff\001\002\000\066\002" +
    "\uffe4\003\uffe4\015\uffe4\017\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\040" +
    "\uffe4\047\uffe4\050\uffe4\053\uffe4\055\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\074\uffe4\001" +
    "\002\000\004\020\334\001\002\000\066\002\uffe5\003\uffe5" +
    "\015\uffe5\017\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\040\uffe5\047\uffe5" +
    "\050\uffe5\053\uffe5\055\uffe5\061\uffe5\062\uffe5\063\uffe5\066" +
    "\uffe5\067\uffe5\070\uffe5\071\uffe5\074\uffe5\001\002\000\020" +
    "\004\uff8e\005\uff8e\006\153\010\uff8e\011\uff8e\012\uff8e\020" +
    "\uff8e\001\002\000\066\002\uffe6\003\uffe6\015\uffe6\017\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\040\uffe6\047\uffe6\050\uffe6\053\uffe6" +
    "\055\uffe6\061\uffe6\062\uffe6\063\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\074\uffe6\001\002\000\066\002\uffe7\003\uffe7" +
    "\015\uffe7\017\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\040\uffe7\047\uffe7" +
    "\050\uffe7\053\uffe7\055\uffe7\061\uffe7\062\uffe7\063\uffe7\066" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\074\uffe7\001\002\000\026" +
    "\006\135\010\054\040\131\041\064\042\067\043\055\044" +
    "\056\051\127\052\130\056\134\001\002\000\010\007\337" +
    "\057\141\060\142\001\002\000\004\014\111\001\002\000" +
    "\060\003\117\015\113\017\027\023\012\024\011\025\042" +
    "\026\040\027\006\030\023\031\043\032\005\033\016\040" +
    "\013\047\030\050\037\053\046\055\021\061\007\062\026" +
    "\063\024\066\031\071\047\074\034\001\002\000\070\002" +
    "\uffda\003\uffda\015\uffda\017\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\040" +
    "\uffda\047\uffda\050\uffda\053\uffda\054\352\055\uffda\061\uffda" +
    "\062\uffda\063\uffda\066\uffda\067\uffda\070\uffda\071\uffda\074" +
    "\uffda\001\002\000\060\003\117\015\113\017\027\023\012" +
    "\024\011\025\042\026\040\027\006\030\023\031\043\032" +
    "\005\033\016\040\013\047\030\050\037\053\046\055\021" +
    "\061\007\062\026\063\024\066\031\071\047\074\034\001" +
    "\002\000\070\002\uffdd\003\uffdd\015\uffdd\017\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\040\uffdd\047\uffdd\050\uffdd\053\uffdd\054\344" +
    "\055\uffdd\061\uffdd\062\uffdd\063\uffdd\066\uffdd\067\uffdd\070" +
    "\uffdd\071\uffdd\074\uffdd\001\002\000\006\014\111\055\021" +
    "\001\002\000\066\002\uffdc\003\uffdc\015\uffdc\017\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\040\uffdc\047\uffdc\050\uffdc\053\uffdc\055" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\074\uffdc\001\002\000\060\003\117\015\113\017" +
    "\027\023\012\024\011\025\042\026\040\027\006\030\023" +
    "\031\043\032\005\033\016\040\013\047\030\050\037\053" +
    "\046\055\021\061\007\062\026\063\024\066\031\071\047" +
    "\074\034\001\002\000\066\002\uffd7\003\uffd7\015\uffd7\017" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\040\uffd7\047\uffd7\050\uffd7\053" +
    "\uffd7\055\uffd7\061\uffd7\062\uffd7\063\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\074\uffd7\001\002\000\060\003\117\015" +
    "\113\017\027\023\012\024\011\025\042\026\040\027\006" +
    "\030\023\031\043\032\005\033\016\040\013\047\030\050" +
    "\037\053\046\055\021\061\007\062\026\063\024\066\031" +
    "\071\047\074\034\001\002\000\066\002\uffdb\003\uffdb\015" +
    "\uffdb\017\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\040\uffdb\047\uffdb\050" +
    "\uffdb\053\uffdb\055\uffdb\061\uffdb\062\uffdb\063\uffdb\066\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\074\uffdb\001\002\000\006\014" +
    "\111\055\021\001\002\000\066\002\uffd9\003\uffd9\015\uffd9" +
    "\017\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\040\uffd9\047\uffd9\050\uffd9" +
    "\053\uffd9\055\uffd9\061\uffd9\062\uffd9\063\uffd9\066\uffd9\067" +
    "\uffd9\070\uffd9\071\uffd9\074\uffd9\001\002\000\060\003\117" +
    "\015\113\017\027\023\012\024\011\025\042\026\040\027" +
    "\006\030\023\031\043\032\005\033\016\040\013\047\030" +
    "\050\037\053\046\055\021\061\007\062\026\063\024\066" +
    "\031\071\047\074\034\001\002\000\066\002\uffd6\003\uffd6" +
    "\015\uffd6\017\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\040\uffd6\047\uffd6" +
    "\050\uffd6\053\uffd6\055\uffd6\061\uffd6\062\uffd6\063\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\071\uffd6\074\uffd6\001\002\000\060" +
    "\003\117\015\113\017\027\023\012\024\011\025\042\026" +
    "\040\027\006\030\023\031\043\032\005\033\016\040\013" +
    "\047\030\050\037\053\046\055\021\061\007\062\026\063" +
    "\024\066\031\071\047\074\034\001\002\000\066\002\uffd8" +
    "\003\uffd8\015\uffd8\017\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\040\uffd8" +
    "\047\uffd8\050\uffd8\053\uffd8\055\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\074\uffd8\001\002" +
    "\000\066\002\uffe8\003\uffe8\015\uffe8\017\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\040\uffe8\047\uffe8\050\uffe8\053\uffe8\055\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8" +
    "\074\uffe8\001\002\000\004\002\001\001\002\000\024\006" +
    "\066\010\054\040\131\041\064\042\067\043\055\044\056" +
    "\051\060\052\062\001\002\000\004\004\367\001\002\000" +
    "\004\010\365\001\002\000\004\020\366\001\002\000\066" +
    "\002\uffb1\003\uffb1\015\uffb1\017\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\040\uffb1\047\uffb1\050\uffb1\053\uffb1\055\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\074\uffb1" +
    "\001\002\000\004\020\370\001\002\000\066\002\uffb2\003" +
    "\uffb2\015\uffb2\017\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\040\uffb2\047" +
    "\uffb2\050\uffb2\053\uffb2\055\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\066\uffb2\067\uffb2\070\uffb2\071\uffb2\074\uffb2\001\002\000" +
    "\004\020\374\001\002\000\004\020\373\001\002\000\066" +
    "\002\uffb3\003\uffb3\015\uffb3\017\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\040\uffb3\047\uffb3\050\uffb3\053\uffb3\055\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\074\uffb3" +
    "\001\002\000\066\002\uffb0\003\uffb0\015\uffb0\017\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\040\uffb0\047\uffb0\050\uffb0\053\uffb0\055" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\066\uffb0\067\uffb0\070\uffb0" +
    "\071\uffb0\074\uffb0\001\002\000\024\024\011\025\042\026" +
    "\040\027\006\030\023\031\043\032\005\033\016\040\377" +
    "\001\002\000\004\007\u0114\001\002\000\006\021\u010d\040" +
    "\uff80\001\002\000\004\040\u0101\001\002\000\004\021\u0102" +
    "\001\002\000\024\006\066\010\054\040\063\041\064\042" +
    "\067\043\055\044\056\051\060\052\062\001\002\000\004" +
    "\020\u0104\001\002\000\024\006\066\010\054\040\131\041" +
    "\064\042\067\043\055\044\056\051\127\052\130\001\002" +
    "\000\004\020\u0106\001\002\000\004\040\u0107\001\002\000" +
    "\006\004\u0108\010\u0109\001\002\000\004\004\u010c\001\002" +
    "\000\004\010\u010b\001\002\000\004\007\uffbd\001\002\000" +
    "\004\007\uffba\001\002\000\004\007\uffbb\001\002\000\024" +
    "\006\066\010\054\040\063\041\064\042\067\043\055\044" +
    "\056\051\060\052\062\001\002\000\004\020\u010f\001\002" +
    "\000\024\006\066\010\054\040\131\041\064\042\067\043" +
    "\055\044\056\051\127\052\130\001\002\000\004\020\u0111" +
    "\001\002\000\024\006\066\010\054\040\131\041\064\042" +
    "\067\043\055\044\056\051\127\052\130\001\002\000\006" +
    "\004\u0108\010\u0109\001\002\000\004\007\uffbc\001\002\000" +
    "\004\014\111\001\002\000\060\003\117\015\113\017\027" +
    "\023\012\024\011\025\042\026\040\027\006\030\023\031" +
    "\043\032\005\033\016\040\013\047\030\050\037\053\046" +
    "\055\021\061\007\062\026\063\024\066\031\071\047\074" +
    "\034\001\002\000\066\002\uffbe\003\uffbe\015\uffbe\017\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\040\uffbe\047\uffbe\050\uffbe\053\uffbe" +
    "\055\uffbe\061\uffbe\062\uffbe\063\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\074\uffbe\001\002\000\060\003\117\015\113" +
    "\017\027\023\012\024\011\025\042\026\040\027\006\030" +
    "\023\031\043\032\005\033\016\040\013\047\030\050\037" +
    "\053\046\055\021\061\007\062\026\063\024\066\031\071" +
    "\047\074\034\001\002\000\066\002\uffbf\003\uffbf\015\uffbf" +
    "\017\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\040\uffbf\047\uffbf\050\uffbf" +
    "\053\uffbf\055\uffbf\061\uffbf\062\uffbf\063\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\071\uffbf\074\uffbf\001\002\000\066\002\ufff4" +
    "\003\ufff4\015\ufff4\017\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\040\ufff4" +
    "\047\ufff4\050\ufff4\053\ufff4\055\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\074\ufff4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\040\003\013\004\034\005\047\010\043\011" +
    "\014\014\040\016\044\020\035\023\031\030\007\031\032" +
    "\035\016\036\017\040\003\042\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\034\005\047\010" +
    "\043\011\014\014\040\016\044\020\035\023\031\030\007" +
    "\031\032\035\211\040\003\042\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\064" +
    "\011\326\015\327\001\001\000\034\004\034\005\047\010" +
    "\043\011\014\014\040\016\044\020\035\023\031\030\007" +
    "\031\032\035\120\040\003\042\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\064\013\060" +
    "\015\056\001\001\000\004\002\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\102\001" +
    "\001\000\002\001\001\000\004\002\101\001\001\000\004" +
    "\002\100\001\001\000\004\002\077\001\001\000\004\002" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\064\015\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\034\005\047\010\043\011\014\014\114\016\044" +
    "\020\035\023\031\027\113\030\007\031\032\040\003\042" +
    "\021\044\115\001\001\000\002\001\001\000\034\004\034" +
    "\005\047\010\043\011\014\014\173\016\044\020\035\023" +
    "\031\030\007\031\032\040\003\042\021\044\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\034\005" +
    "\047\010\043\011\014\014\040\016\044\020\035\023\031" +
    "\030\007\031\032\035\120\040\003\042\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\064\011\123\015\125\024\131\025\124\032\132\033" +
    "\135\001\001\000\002\001\001\000\004\026\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\064\011\123\015\125\024\131\025\124\032\151\001" +
    "\001\000\020\002\146\011\123\015\125\024\131\025\124" +
    "\032\132\033\147\001\001\000\004\034\137\001\001\000" +
    "\002\001\001\000\016\002\064\011\123\015\125\024\131" +
    "\025\124\032\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\064" +
    "\012\155\015\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\064\015\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\064\011\123\015\125\025\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\064\011\123\015\125\024\131" +
    "\025\124\032\132\033\177\001\001\000\004\034\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\064" +
    "\011\123\015\125\024\131\025\124\032\132\033\203\001" +
    "\001\000\004\034\137\001\001\000\004\043\205\001\001" +
    "\000\040\004\034\005\047\010\043\011\014\014\040\016" +
    "\044\020\035\023\031\030\007\031\032\035\016\036\207" +
    "\040\003\042\021\044\206\001\001\000\002\001\001\000" +
    "\036\004\034\005\047\010\043\011\014\014\040\016\044" +
    "\020\035\023\031\030\007\031\032\035\211\040\003\042" +
    "\021\044\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\221\006" +
    "\216\007\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\034\005\047\010\043" +
    "\011\014\014\114\016\044\020\035\023\031\027\224\030" +
    "\007\031\032\040\003\042\021\044\225\001\001\000\034" +
    "\004\034\005\047\010\043\011\014\014\173\016\044\020" +
    "\035\023\031\030\007\031\032\040\003\042\021\044\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\221\007\235\001\001\000\004\043\231\001\001\000\036" +
    "\004\034\005\047\010\043\011\014\014\114\016\044\020" +
    "\035\023\031\027\232\030\007\031\032\040\003\042\021" +
    "\044\233\001\001\000\034\004\034\005\047\010\043\011" +
    "\014\014\173\016\044\020\035\023\031\030\007\031\032" +
    "\040\003\042\021\044\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\064\011\123\015\125\025\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\064\013\245\015\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\253\001\001\000\004\037" +
    "\254\001\001\000\002\001\001\000\012\002\064\011\123" +
    "\015\125\025\256\001\001\000\002\001\001\000\034\004" +
    "\034\005\047\010\043\011\014\014\114\016\044\020\035" +
    "\023\031\027\260\030\007\031\032\040\003\042\021\001" +
    "\001\000\032\004\034\005\047\010\043\011\014\014\173" +
    "\016\044\020\035\023\031\030\007\031\032\040\003\042" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\064\011\123\015\125\025\265\001" +
    "\001\000\002\001\001\000\034\004\034\005\047\010\043" +
    "\011\014\014\114\016\044\020\035\023\031\027\267\030" +
    "\007\031\032\040\003\042\021\001\001\000\032\004\034" +
    "\005\047\010\043\011\014\014\173\016\044\020\035\023" +
    "\031\030\007\031\032\040\003\042\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\034\005\047\010" +
    "\043\011\014\014\114\016\044\020\035\023\031\027\273" +
    "\030\007\031\032\040\003\042\021\001\001\000\034\004" +
    "\034\005\047\010\043\011\014\014\173\016\044\020\035" +
    "\023\031\030\007\031\032\040\003\042\021\044\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\304\001\001\000\036" +
    "\004\034\005\047\010\043\011\014\014\114\016\044\020" +
    "\035\023\031\027\305\030\007\031\032\040\003\042\021" +
    "\044\306\001\001\000\034\004\034\005\047\010\043\011" +
    "\014\014\173\016\044\020\035\023\031\030\007\031\032" +
    "\040\003\042\021\044\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\221\006\311\007\215\001\001" +
    "\000\002\001\001\000\004\043\313\001\001\000\036\004" +
    "\034\005\047\010\043\011\014\014\114\016\044\020\035" +
    "\023\031\027\314\030\007\031\032\040\003\042\021\044" +
    "\315\001\001\000\034\004\034\005\047\010\043\011\014" +
    "\014\173\016\044\020\035\023\031\030\007\031\032\040" +
    "\003\042\021\044\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\320\001\001\000\036\004\034\005" +
    "\047\010\043\011\014\014\114\016\044\020\035\023\031" +
    "\027\321\030\007\031\032\040\003\042\021\044\322\001" +
    "\001\000\034\004\034\005\047\010\043\011\014\014\173" +
    "\016\044\020\035\023\031\030\007\031\032\040\003\042" +
    "\021\044\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\064\011\123\015" +
    "\125\024\131\025\124\032\132\033\335\001\001\000\004" +
    "\034\137\001\001\000\004\043\337\001\001\000\040\004" +
    "\034\005\047\010\043\011\014\014\040\016\044\020\035" +
    "\023\031\030\007\031\032\035\016\036\341\040\003\042" +
    "\021\044\340\001\001\000\002\001\001\000\036\004\034" +
    "\005\047\010\043\011\014\014\040\016\044\020\035\023" +
    "\031\030\007\031\032\035\211\040\003\042\021\044\342" +
    "\001\001\000\002\001\001\000\006\031\344\043\345\001" +
    "\001\000\002\001\001\000\040\004\034\005\047\010\043" +
    "\011\014\014\040\016\044\020\035\023\031\030\007\031" +
    "\032\035\016\036\347\040\003\042\021\044\346\001\001" +
    "\000\002\001\001\000\036\004\034\005\047\010\043\011" +
    "\014\014\040\016\044\020\035\023\031\030\007\031\032" +
    "\035\211\040\003\042\021\044\350\001\001\000\002\001" +
    "\001\000\006\031\352\043\353\001\001\000\002\001\001" +
    "\000\040\004\034\005\047\010\043\011\014\014\040\016" +
    "\044\020\035\023\031\030\007\031\032\035\016\036\355" +
    "\040\003\042\021\044\354\001\001\000\002\001\001\000" +
    "\036\004\034\005\047\010\043\011\014\014\040\016\044" +
    "\020\035\023\031\030\007\031\032\035\211\040\003\042" +
    "\021\044\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\064\011\370\015\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\377\022\375\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\064\015\u0102\001\001\000\002\001\001\000" +
    "\014\002\064\011\123\015\125\024\u0104\025\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\064\015" +
    "\u010d\001\001\000\002\001\001\000\014\002\064\011\123" +
    "\015\125\024\u010f\025\124\001\001\000\002\001\001\000" +
    "\014\002\064\011\123\015\125\024\u0111\025\124\001\001" +
    "\000\004\021\u0112\001\001\000\002\001\001\000\004\043" +
    "\u0114\001\001\000\040\004\034\005\047\010\043\011\014" +
    "\014\040\016\044\020\035\023\031\030\007\031\032\035" +
    "\016\036\u0116\040\003\042\021\044\u0115\001\001\000\002" +
    "\001\001\000\036\004\034\005\047\010\043\011\014\014" +
    "\040\016\044\020\035\023\031\030\007\031\032\035\211" +
    "\040\003\042\021\044\u0117\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    int tabs = 0;
    boolean lock = false;
    StringBuilder salida = new StringBuilder();
    StringBuilder consoleLog = new StringBuilder();
    ListaExpresiones lista = new ListaExpresiones();
    LinkedList<ListaValores> salidas = new LinkedList<>();
    LinkedList<Declaracion> simbolos = new LinkedList<>();
    boolean isString = false;
    LinkedList<String> erroresSemanticos = new LinkedList<>();
    String temporal;
    String errorTemporal = "";

/*
int a = 1;
a = 4;
*/
    public LinkedList<String> getErroresSemanticos(){
        return erroresSemanticos;
    }
    public double leerSimbolos(String nombre) {
        for (int i = simbolos.size() - 1; i >= 0; i--) {
            Declaracion temp = simbolos.get(i);
            if (temp.getNombre() != null && temp.getNombre().equals(nombre)) {
                if (temp.getValor() != null && temp.getValor().getTipoValor().equalsIgnoreCase("doubleValue")) {
                    return temp.getValor().getDecimal();
                } else if (temp.getValor() != null && temp.getValor().getCadena() != null && !temp.getValor().getCadena().isBlank()) {
                    isString = true;
                    temporal = temp.getValor().getCadena();
                    return Double.NEGATIVE_INFINITY;
                }
            } else if (temp.getIdentificadores() != null) {
                for (String identificador : temp.getIdentificadores()) {
                    if (identificador.equalsIgnoreCase(nombre)) {
                        if (temp.getValor() != null && temp.getValor().getTipoValor().equalsIgnoreCase("doubleValue")) {
                            return temp.getValor().getDecimal();
                        } else if (temp.getValor() != null && temp.getValor().getCadena() != null && !temp.getValor().getCadena().isBlank()) {
                            isString = true;
                            temporal = temp.getValor().getCadena();
                            return Double.NEGATIVE_INFINITY;
                        }
                    }
                }
                if (i - 1 < 0) {
                    //significa que no lo encontro
                    return Double.MIN_VALUE;
                }
            }
        }
        return Double.MAX_VALUE;
    }
    
    public void asignarValor(String nombre, Valor valor) {
        for (int i = simbolos.size() - 1; i >= 0; i--) {
            if (simbolos.get(i).getNombre() != null && simbolos.get(i).getNombre().equals(nombre)) {
                if (isString) {
                    simbolos.get(i).setValor(new Valor(temporal, "cadena", 0, 0));
                } else {
                    simbolos.get(i).setValor(valor);
                }
            } else if (simbolos.get(i).getIdentificadores() != null) {
                for (String cadena : simbolos.get(i).getIdentificadores()) {
                    if (cadena.equals(nombre)) {
                        simbolos.get(i).setValor(valor);
                    }
                }
            }
        }
        isString = false;
        temporal = "";
    }

    

    Raiz raiz;

    public Raiz getRaiz(){
        return raiz;
    }

    public ListaExpresiones getLista(){
        return lista;
    }

    public LinkedList<ListaValores> getConsoleLog(){
        return salidas;
    }

    public LinkedList<Declaracion> getSimbolos(){
        return simbolos;
    }
    LinkedList<Data.Error> errores = new LinkedList<>();
    public LinkedList<Data.Error> getErrores(){
        return errores;
    }
    private void addLine(){
        salida.append("\n");
    }
    private void addText(String valor){
        salida.append(valor);
    }
    private void addTabs(){
        salida.append("\n");
        for (int i = 0; i < tabs; i++) {
            salida.append("\t");
        }
    }
        public String getSalida(){
        String exit = salida.toString();
        String[] lineas = salida.toString().split("\n");
        StringBuilder nuevo = new StringBuilder();
        for (int i = lineas.length-1; i >= 0; i--) {
            if (!lineas[i].isEmpty()&&!lineas[i].isBlank()) {
                nuevo.append(lineas[i]).append("\n");
            }
        }
        ArrayList<Integer> cantTabs = contarTabs(nuevo.toString().split("\n"));
        int maxTabs = maxTabNum(cantTabs);
        
        for(Data.Error error:errores){
            System.out.println(error.toString());
        }

        Extras.Formatter formatter= new Extras.Formatter();
        //formatter.Reformat(nuevo.toString().split("\n"), 0, maxTabs, 0, lineas.length, 0);
        return nuevo.toString();
    }
        
        public void append(Declaracion declaracion){
            simbolos.add(declaracion);
            System.out.println("Tamaño de simbolos: "+simbolos.size());
        }
  
       public ArrayList<Integer> contarTabs(String[] lineas){
        ArrayList<Integer> cantTabs = new ArrayList<>();
        for (int i = 0; i < lineas.length; i++) {
            char[] caracteres = lineas[i].toCharArray();
            int contador = 0;
            for (int j = 0; j < caracteres.length; j++) {
                if (caracteres[j] == '\t') {
                    contador++;
                }
            }
            cantTabs.add(contador);
            contador = 0;
        }
        maxTabNum(cantTabs);
        System.out.println(cantTabs.toString());
        return cantTabs;
    }

    public int maxTabNum(ArrayList<Integer> cantTabs) {
        int salida = 0;
        for (int i = 0; i < cantTabs.size(); i++) {
            if (cantTabs.get(i) > salida) {
                salida = cantTabs.get(i);
            }
        }
        System.out.println("NUMERO MAXIMO TABS: "+salida);
        return salida;
    }
     public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + MyParserSym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", (cur_token.left+1), cur_token.right));
        errores.add(new Data.Error(MyParserSym.terminalNames[cur_token.sym], "Sintactico", (cur_token.left+1), cur_token.right));
    }

    public void custom_syntax_error(String wrong, Symbol cur_token) {
        System.out.println("El error es el simbolo: " + wrong);
        System.out.println(String.format("En la posicion: %d, %d", (cur_token.left+1), cur_token.right));
        errores.add(new Data.Error(wrong, "Sintactico", (cur_token.left+1), cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        errores.add(new Data.Error(MyParserSym.terminalNames[cur_token.sym], "Sintactico irrecuperable", (cur_token.left+1), cur_token.right));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MyParser$actions {
  private final MyParser parser;

  /** Constructor */
  CUP$MyParser$actions(MyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action_part00000000(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MyParser$result;

      /* select the action based on the action number */
      switch (CUP$MyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones start_val = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = start_val;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MyParser$parser.done_parsing();
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentenciasCiclo 
            {
              ListaExpresiones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		ListaExpresiones f = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		lista = f;raiz = new Raiz(f); RESULT = f;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error LBRACE 
            {
              ListaExpresiones RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= ids 
            {
              ListaExpresiones RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Funcion s = (Funcion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaExpresiones().append((Funcion)s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= funciones ids 
            {
              ListaExpresiones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones f = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Funcion i = (Funcion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = f.append((Funcion)i);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funciones ::= declaracion 
            {
              ListaExpresiones RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Declaracion s = (Declaracion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaExpresiones().append((Declaracion)s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= funciones declaracion 
            {
              ListaExpresiones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones f = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = f.append((Declaracion)d);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= asignacion SEMI 
            {
              ListaExpresiones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new ListaExpresiones().append((Asignacion)a);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= funciones asignacion 
            {
              ListaExpresiones RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones f = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = f.append((Asignacion)a);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("funciones",35, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentenciasCiclo ::= sentenciaCiclo 
            {
              ListaExpresiones RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaExpresiones().append(s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentenciasCiclo ::= sentenciasCiclo sentenciaCiclo 
            {
              ListaExpresiones RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones ss = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = ss.append(s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciasCiclo",28, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentenciaCiclo ::= sentencia 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentenciaCiclo ::= BREAK SEMI 
            {
              Expresion RESULT =null;
		BreakContinue sentencia = new BreakContinue();RESULT =sentencia.setFreno(true);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentenciaCiclo ::= CONTINUE SEMI 
            {
              Expresion RESULT =null;
		BreakContinue sentencia = new BreakContinue();RESULT =sentencia.setContinuar(true);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentenciaCiclo",27, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= sentencia 
            {
              ListaExpresiones RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaExpresiones().append(s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencias ::= sentencias sentencia 
            {
              ListaExpresiones RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones ss = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = ss.append(s);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencias",21, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= if 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		If s = (If)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println(s.toString());RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= ids 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Funcion i = (Funcion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= do 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		DoWhile s = (DoWhile)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= while 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		While s = (While)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= for 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		For s = (For)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= switch 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Switch s = (Switch)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= asignacion 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Asignacion s = (Asignacion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= declaracion 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Declaracion s = (Declaracion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= console 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		ConsoleLog s = (ConsoleLog)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = s;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= llamada SEMI 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Llamada l = (Llamada)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = l;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= RETURN valor SEMI 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new Return(v, (cur_token.left+1), cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= RETURN identifier SEMI 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new Return(new Valor(i,"IDENTIFICADOR",(cur_token.left+1), cur_token.right), (cur_token.left+1), cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= RETURN SEMI 
            {
              Expresion RESULT =null;
		RESULT = new Return((cur_token.left+1), cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= RETURN llamada 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Llamada i = (Llamada)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Return(new Valor(i,"LLAMADA",(cur_token.left+1), cur_token.right),(cur_token.left+1), cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= ERROR 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		custom_syntax_error(e,cur_token);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= error sentenciaCiclo 
            {
              Expresion RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("sentencia",10, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // console ::= CONSOLE DOT WRITE LPAREN consoleInside RPAREN SEMI 
            {
              ConsoleLog RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaValores c = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		System.out.println("VALOR DE CONSOLA"+c.toString());salidas.add(c);RESULT = new ConsoleLog(c,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("console",32, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // console ::= WRITELINE LPAREN consoleInside RPAREN SEMI 
            {
              ConsoleLog RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaValores c = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		System.out.println("VALOR DE CONSOLA"+c.toString());salidas.add(c);RESULT = new ConsoleLog(c,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("console",32, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // consoleInside ::= valor 
            {
              ListaValores RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println("VALOR ENCONTRADO EN CONSOLE"+v.toString());RESULT = new ListaValores().append(v);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("consoleInside",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // consoleInside ::= consoleInside PLUS valor 
            {
              ListaValores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaValores a = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println("VALOR ENCONTRADO EN CONSOLE"+v.toString());RESULT = a.append(v);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("consoleInside",9, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentenciasCiclo llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new If(c,s,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentenciasCiclo llaveCierre ELSE if 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		If e = (If)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new If(c,s,e,false,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentenciasCiclo llaveCierre ELSE llaveApertura sentenciasCiclo llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s2 = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new If(c,s,s2,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-10)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		RESULT = new If(c,null,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE if 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		If e = (If)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new If(c,null,e,false,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE llaveApertura sentenciasCiclo llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s2 = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new If(c,null,s2,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura sentenciasCiclo llaveCierre ELSE llaveApertura llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		RESULT = new If(c,s,null,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if ::= IF LPAREN condicionCompleta RPAREN llaveApertura llaveCierre ELSE llaveApertura llaveCierre 
            {
              If RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		RESULT = new If(c,null,null,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // do ::= DO llaveApertura sentencias llaveCierre WHILE LPAREN condicionCompleta RPAREN SEMI 
            {
              DoWhile RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = new DoWhile(s,c,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // do ::= DO llaveApertura llaveCierre WHILE LPAREN condicionCompleta RPAREN SEMI 
            {
              DoWhile RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = new DoWhile(null,c,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("do",22, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // while ::= WHILE LPAREN condicionCompleta RPAREN llaveApertura sentenciasCiclo llaveCierre 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new While(s,c,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // while ::= WHILE LPAREN condicionCompleta RPAREN llaveApertura llaveCierre 
            {
              While RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaCondiciones c = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		addText("while "+c+" :");
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicionCompleta ::= condicionIf 
            {
              ListaCondiciones RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT= new ListaCondiciones().append(c);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicionCompleta ::= condicionCompleta signoLogico condicionIf 
            {
              ListaCondiciones RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaCondiciones c1 = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Condicion c2 = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		c2.setSignoLogico(s);RESULT = c1.append(c2);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicionCompleta ::= LPAREN condicionCompleta RPAREN 
            {
              ListaCondiciones RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaCondiciones c1 = (ListaCondiciones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = c1;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionCompleta",25, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicionIf ::= condicion 
            {
              Condicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = c;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicionIf ::= NOT condicionIf 
            {
              Condicion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Condicion i = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT =i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicionIf",24, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicion ::= valorCondicion signoCondicion valorCondicion 
            {
              Condicion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Valor v1 = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v2 = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Condicion(s,v1,v2,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicion ::= TRUE 
            {
              Condicion RESULT =null;
		RESULT =new Condicion("TRUE",false,(cur_token.left+1), cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicion ::= FALSE 
            {
              Condicion RESULT =null;
		RESULT =new Condicion("FALSE",false,(cur_token.left+1), cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valorCondicion ::= valor 
            {
              Valor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = v;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valorCondicion ::= llamada 
            {
              Valor RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Llamada l = (Llamada)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Valor(l,"LLAMADA",(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valorCondicion",19, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // signoLogico ::= AND AND 
            {
              String RESULT =null;
		RESULT = "&&";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoLogico",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // signoLogico ::= OR OR 
            {
              String RESULT =null;
		RESULT = "||";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoLogico",26, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // signoCondicion ::= LT 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // signoCondicion ::= GT 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // signoCondicion ::= LET 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // signoCondicion ::= LGT 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // signoCondicion ::= ASIGN ASIGN 
            {
              String RESULT =null;
		RESULT = "==";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // signoCondicion ::= NOT ASIGN 
            {
              String RESULT =null;
		RESULT = "!=";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("signoCondicion",20, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // for ::= FOR LPAREN declaracionFor RPAREN llaveApertura sentenciasCiclo llaveCierre 
            {
              For RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		DeclaracionFor de = (DeclaracionFor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new For(de,s,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // for ::= FOR LPAREN declaracionFor RPAREN llaveApertura llaveCierre 
            {
              For RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		DeclaracionFor de = (DeclaracionFor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		RESULT = new For(de,null,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("for",14, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracionFor ::= tipo identifier ASIGN valor SEMI condicion SEMI identifier forVariation 
            {
              DeclaracionFor RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new DeclaracionFor(new Declaracion(t,(i),v,(cur_token.left+1),cur_token.right),c,v3);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-8)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracionFor ::= identifier ASIGN valor SEMI condicion SEMI condicion forVariation 
            {
              DeclaracionFor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new DeclaracionFor(new Declaracion(null,(i),v,(cur_token.left+1),cur_token.right),a,v3);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracionFor",16, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // forVariation ::= PLUS PLUS 
            {
              String RESULT =null;
		RESULT = "++";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // forVariation ::= MINUS MINUS 
            {
              String RESULT =null;
		RESULT = "--";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("forVariation",15, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // switch ::= SWITCH LPAREN identifier RPAREN llaveApertura multiCase DEFAULT COLON sentencias BREAK SEMI llaveCierre 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaCasos m = (ListaCasos)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		RESULT = new Switch(i, m, s,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("switch",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-11)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // switch ::= SWITCH LPAREN identifier RPAREN llaveApertura multiCase DEFAULT COLON sentencias llaveCierre 
            {
              Switch RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaCasos m = (ListaCasos)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new Switch(i, m, s,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("switch",30, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-9)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multiCase ::= multiCase CASE valorCondicion COLON sentencias BREAK SEMI 
            {
              ListaCasos RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		ListaCasos m = (ListaCasos)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = m.append(new Case(v,s,true,(cur_token.left+1),cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // multiCase ::= multiCase CASE valorCondicion COLON sentencias 
            {
              ListaCasos RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaCasos m = (ListaCasos)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = m.append(new Case(v,s,false,(cur_token.left+1),cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // multiCase ::= CASE valorCondicion COLON sentencias BREAK SEMI 
            {
              ListaCasos RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = new ListaCasos().append(new Case(v,s,true,(cur_token.left+1),cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // multiCase ::= CASE valorCondicion COLON sentencias 
            {
              ListaCasos RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaCasos().append(new Case(v,s,false,(cur_token.left+1),cur_token.right));
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("multiCase",29, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // asignacion ::= identifier ASIGN valor SEMI 
            {
              Asignacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		asignarValor(i,v);RESULT = new Asignacion(i,v,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // asignacion ::= identifier PLUS PLUS SEMI 
            {
              Asignacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		
                            double res = leerSimbolos(i);
                            Asignacion tempAsign;
                            if(res!=Double.MAX_VALUE && res!=Double.MIN_VALUE && res!= Double.NEGATIVE_INFINITY){
                                Valor nuevo = new Valor(res+1,cur_token.left+1,cur_token.right,false);
                                asignarValor(i,nuevo);
                                tempAsign = new Asignacion(i,nuevo,"++",(cur_token.left+1),cur_token.right);
                            }else{
                                tempAsign = new Asignacion(i,null,"++",(cur_token.left+1),cur_token.right);
                            }RESULT = tempAsign;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // asignacion ::= identifier MINUS MINUS SEMI 
            {
              Asignacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		
                            double res = leerSimbolos(i);
                            Asignacion tempAsign;
                            if(res!=Double.MAX_VALUE && res!=Double.MIN_VALUE && res!= Double.NEGATIVE_INFINITY){
                                Valor nuevo =new Valor(res-1,cur_token.left+1,cur_token.right,false);
                                asignarValor(i,nuevo);
                                tempAsign = new Asignacion(i,nuevo,"--",(cur_token.left+1),cur_token.right);
                            }else{
                                tempAsign = new Asignacion(i,null,"--",(cur_token.left+1),cur_token.right);
                            }RESULT = tempAsign;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignacion ::= identifier ASIGN llamada SEMI 
            {
              Asignacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Llamada l = (Llamada)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new Asignacion(i,l,(cur_token.left+1), cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracion ::= tipo identifiers SEMI 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaString is = (ListaString)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		append(new Declaracion(t,is,null, (cur_token.left+1),cur_token.right));RESULT = new Declaracion(t,is,null, (cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracion ::= tipo identifiers ASIGN valorCondicion SEMI 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaString i = (ListaString)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		append(new Declaracion(t,i,v, (cur_token.left+1),cur_token.right));RESULT =new Declaracion(t,i,v, (cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // identifiers ::= identifier 
            {
              ListaString RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaString().append(i);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("identifiers",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // identifiers ::= identifiers COMMA identifier 
            {
              ListaString RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaString is = (ListaString)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = is.append(i);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("identifiers",31, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // llamada ::= identifier LPAREN RPAREN 
            {
              Llamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		RESULT = new Llamada(i,null,(cur_token.left+1), cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // llamada ::= identifier LPAREN atributos RPAREN 
            {
              Llamada RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaValores a = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		RESULT = new Llamada(i,a,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llamada",7, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // atributos ::= valor 
            {
              ListaValores RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaValores().append(v);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // atributos ::= atributos COMMA valor 
            {
              ListaValores RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaValores a = (ListaValores)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = a.append(v);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // params ::= param 
            {
              ListaParametros RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new ListaParametros().append(p);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // params ::= params COMMA param 
            {
              ListaParametros RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		ListaParametros list = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = list.append(p);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // param ::= tipo identifier 
            {
              Parametro RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		int nombleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int nombright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String nomb = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		append(new Declaracion(tip, nomb,null,(cur_token.left+1),cur_token.right));
RESULT = new Parametro(nomb,tip,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ids ::= tipo identifier LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		append( new Declaracion(t,(i),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion(t,i,null,s,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ids ::= tipo identifier LPAREN params RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaParametros p = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		append(new Declaracion(t,(i),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion(t,i,p,s,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ids ::= VOID identifier LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		append(new Declaracion("void",(i),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion("VOID",i,null,s,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ids ::= VOID identifier LPAREN params RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		ListaParametros p = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		append(new Declaracion("void",(i),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion("VOID",i,p,s,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-7)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ids ::= tipo identifier LPAREN RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		append(new Declaracion(t,(i),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion(t,i,null,null,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ids ::= tipo identifier LPAREN params RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaParametros p = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		append(new Declaracion(t,(i),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion(t,i,p,null,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ids ::= VOID identifier LPAREN RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-4)).value;
		append(new Declaracion("void",(i),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion("VOID",i,null,null,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ids ::= VOID identifier LPAREN params RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).right;
		ListaParametros p = (ListaParametros)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-3)).value;
		append(new Declaracion("void",(i),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion("VOID",i,p,null,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ids ::= VOID MAIN LPAREN RPAREN llaveApertura sentencias llaveCierre 
            {
              Funcion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		ListaExpresiones s = (ListaExpresiones)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		append(new Declaracion("void",("main"),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion("VOID","main",null,s,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-6)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ids ::= VOID MAIN LPAREN RPAREN llaveApertura llaveCierre 
            {
              Funcion RESULT =null;
		append(new Declaracion("void",("main"),null, (cur_token.left+1),cur_token.right));RESULT = new Funcion("VOID","main",null,null,(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-5)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ids ::= error SEMI 
            {
              Funcion RESULT =null;

              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("ids",3, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // llaveApertura ::= LBRACE 
            {
              Object RESULT =null;
		tabs++; addTabs();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llaveApertura",33, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // llaveCierre ::= RBRACE 
            {
              Object RESULT =null;
		tabs--; addTabs();
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("llaveCierre",34, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= expr PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(e1 + e2); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= expr MINUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(e1 - e2); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= expr TIMES expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(e1 * e2); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= expr DIV expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(e1 / e2); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= expr MOD expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(e1 % e2); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= doubleValue 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		double n = (double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = n; 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= intValue 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		double n = (double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(n); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr ::= charValue 
            {
              Double RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		
            char r = c.charAt(0);
            double res = r;
            RESULT = res;
          
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= MINUS expr 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		 RESULT = new Double(0 - e); 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr ::= identifier 
            {
              Double RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		
            double resultado = leerSimbolos(i);
            if(resultado == Double.MAX_VALUE){
                resultado = 0;
                System.out.println(resultado+" NO ENCONTRE VALOR");
                
            }else if(resultado == Double.MIN_VALUE){
                System.out.println("Simbolo no encontrado "+i);
                erroresSemanticos.add("Simbolo no encontrado "+i+" En posicion: "+(cur_token.left+1)+" "+(cur_token.right));
                resultado = 0;
            }else if(resultado == Double.NEGATIVE_INFINITY){
                System.out.println("Soy String "+temporal);
                resultado = 0;
            }
            else{
                System.out.println(resultado+" SI TENGO VALOR");
            }
            RESULT = resultado;
          
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr ::= LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.elementAt(CUP$MyParser$top-1)).value;
		 RESULT = e; 
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$MyParser$stack.elementAt(CUP$MyParser$top-2)), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor ::= expr 
            {
              Valor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println("Valor retornado por expresion"+e);
    Valor temp;
    if(isString){
        temp = new Valor(temporal,"stringValue",(cur_token.left+1),cur_token.right);
        isString=false;
    }else{
        temp = new Valor(e,(cur_token.left+1),cur_token.right,true);
    }
    RESULT = temp;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // valor ::= stringValue 
            {
              Valor RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		RESULT = new Valor(s,"stringValue",(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // valor ::= TRUE 
            {
              Valor RESULT =null;
		RESULT = new Valor("true","TRUE",(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor ::= FALSE 
            {
              Valor RESULT =null;
		RESULT = new Valor("false","FALSE",(cur_token.left+1),cur_token.right);
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("valor",11, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipo ::= INT 
            {
              String RESULT =null;
		System.out.println("INT");RESULT = "INT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipo ::= LONG 
            {
              String RESULT =null;
		System.out.println("LONG");RESULT ="LONG";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipo ::= FLOAT 
            {
              String RESULT =null;
		System.out.println("FLOAT");RESULT ="FLOAT";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipo ::= DOUBLE 
            {
              String RESULT =null;
		System.out.println("DOUBLE");RESULT ="DOUBLE";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo ::= DECIMAL 
            {
              String RESULT =null;
		System.out.println("DECIMAL");RESULT ="DECIMAL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo ::= STRING 
            {
              String RESULT =null;
		System.out.println("STRING");RESULT ="STRING";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo ::= CHAR 
            {
              String RESULT =null;
		System.out.println("CHAR");RESULT ="CHAR";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipo ::= BOOL 
            {
              String RESULT =null;
		System.out.println("BOOL");RESULT ="BOOL";
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tipo ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MyParser$stack.peek()).value;
		System.out.println(i); RESULT = i;
              CUP$MyParser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MyParser$stack.peek()), RESULT);
            }
          return CUP$MyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MyParser$do_action(
    int                        CUP$MyParser$act_num,
    java_cup.runtime.lr_parser CUP$MyParser$parser,
    java.util.Stack            CUP$MyParser$stack,
    int                        CUP$MyParser$top)
    throws java.lang.Exception
    {
              return CUP$MyParser$do_action_part00000000(
                               CUP$MyParser$act_num,
                               CUP$MyParser$parser,
                               CUP$MyParser$stack,
                               CUP$MyParser$top);
    }
}

}
